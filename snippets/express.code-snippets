{
  "cors": {
    "prefix": "cors",
    "description": "Basic configuration for cors with no dependency",
    "body": [
      "export default function corsMiddleware(req, res, next) {",
      "const allowedOrigins = ['http://localhost:3000']",
      "const origin = req.headers.origin",
      " if (allowedOrigins.includes(origin)) res.setHeader('Access-Control-Allow-Origin', origin)",
      "res.setHeader('Access-Control-Allow-Credentials', 'true')",
      "res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')",
      "res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization')",
      "if (req.method === 'OPTIONS') return res.sendStatus(200)",
      "next()",
      "}"
    ]
  },
  "jwt": {
    "prefix": "jwt",
    "description": "Basic configuration for json web tokens",
    "body": [
      "import jwt from 'jsonwebtoken'",
      "export default function createAccessToken(payload) {",
      "",
      "return new Promise((resolve, reject) => {",
      "jwt.sign(",
      "payload,",
      "process.env.TOKEN_SECRET,",
      "{ expiresIn: '1d',},",
      "(err, token) => {if (err) reject(err) resolve(token)})",
      "})}"
    ]
  },
  "mongoconnect": {
    "prefix": "mongooseconnect",
    "description": "template for connecting to mongodb",
    "body": [
      "import mongoose from 'mongoose'",
      "",
      "export const connectDb = async () => {",
      "try {",
      "await mongoose.connect(process.env.DB_URL)",
      "console.log('mongo online')",
      "} catch (error) {",
      "console.log('error al conectar a la base de datos' + error)}}"
    ]
  },
  "expressconfig": {
    "prefix": "expressconfig",
    "description": "template for creating a base express config, creating a connection",
    "body": [
      "import express from 'express'",
      "const app = express()",
      "import corsMiddleware from './middlewares/cors.js'",
      "",
      "app.disable('x-powered-by')",
      "app.use(express.json()),",
      "app.use(corsMiddleware())",
      "",
      "app.get('', (req, res) => {",
      "res.send('Server Running')})"
    ]
  }
}
