{
  "component call": {
    "prefix": "<<",
    "body": ["<$1 />"]
  },
  "styled": {
    "prefix": "styled",
    "description": "Create base layout for styled component element",
    "body": ["const $1 = styled.$2`", "$4", "`"]
  },
  "consolecolor": {
    "prefix": "logcolor",
    "description": "Console log with style",
    "body": ["console.log(`%c $1 `, 'color:#9ee5ff ;font-size:1.3rem')"]
  },
  "useState": {
    "prefix": "usestate",
    "body": ["const [$1, set$2] = useState($3)"]
  },
  "useRef": {
    "prefix": "useref",
    "body": ["const $1 = useRef()"]
  },
  "useEffect": {
    "prefix": "useeffect",
    "body": [
      "useEffect(() => {",
      "$1",
      "return function cleanup() { $2}",
      "",
      "},[$3])"
    ]
  },
  "set Timer": {
    "prefix": "setTimer",
    "body": [
      "useEffect(() => {",
      "$1",
      "const timer = setTimeout(() => {",
      "return console.log('timer finish')",
      "}, 1000)",
      "return () => clearTimeout(timer)",
      "",
      "},[$3])"
    ],
    "description": "Set interval optimized for react"
  },
  "createcontext": {
    "prefix": "context",
    "body": [
      "import { createContext, createContext, useContext } from 'react'",
      "export const ${TM_FILENAME_BASE} = createContext()",
      "",
      "export function use${TM_FILENAME_BASE}() {",
      "const context = useContext(TimeContext)",
      "if (!context) {",
      "throw new Error('use${TM_FILENAME_BASE} debe estar dentro de un provider')",
      "}",
      "return context",
      "}",
      "export const ${TM_FILENAME_BASE} = createContext()",
      "",
      "export function  use${TM_FILENAME_BASE}() {",
      "const context = useContext(${TM_FILENAME_BASE})",
      "if (!context) {",
      "throw new Error('use${TM_FILENAME_BASE} debe estar dentro de un provider')}",
      "return context",
      "}",
      "export function use$1Provider({ children }) {",
      "",
      "return <${TM_FILENAME_BASE}.Provider value={{}}>{children}</${TM_FILENAME_BASE}.Provider>}"
    ]
  },
  "fetchGET": {
    "prefix": "fetchPOST",
    "body": [
      "async function fetchPOST(postData){",
      "try{",
      "const res = await fetch(``), {",
      " method: 'POST',",
      "headers: {",
      "'Content-Type': 'application/json',",
      "},",
      "body: JSON.stringify(postData),",
      "})",
      "",
      "if(!res.ok){",
      "throw new Error('Bad response', { cause: { res } })",
      "}",
      "const data = await res.json()",
      "return data",
      "catch(error){",
      "throw error",
      "}}"
    ]
  },
  "fetchPOST": {
    "prefix": "fetchGET",
    "body": [
      "async function fetchGET(){",
      "try{",
      "const res = await fetch(``)",
      "",
      "if(!res.ok){",
      "throw new Error('Bad response', { cause: { res } })",
      "}",
      "const data = await res.json()",
      "return data",
      "catch(error){",
      "throw error",
      "}}"
    ]
  },
  "Function Component": {
    "prefix": "component",
    "body": [
      "export default function ${TM_FILENAME_BASE}(){",
      "\treturn(",
      "\t<>",
      "\t$1",
      "\t</>",
      ")}"
    ],
    "description": "Create a templete for fc component"
  }
}
